// <auto-generated />
using System;
using Ground_Storage_WebAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ground_Storage_WebAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210226223308_conflicts model added")]
    partial class conflictsmodeladded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Ground_Storage_WebAPI.Models.Conflict", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Entity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Keys")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OfflineId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Rev")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RecordId");

                    b.ToTable("Conflicts");
                });

            modelBuilder.Entity("Ground_Storage_WebAPI.Models.Key", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("TEXT");

                    b.HasKey("Name", "RecordId");

                    b.HasIndex("Name", "RecordId");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("Ground_Storage_WebAPI.Models.Record", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Entity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Keys")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OfflineId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Rev")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Entity", "Rev", "OfflineId", "CreatedAt", "UpdatedAt", "CreatorId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("Ground_Storage_WebAPI.Models.Conflict", b =>
                {
                    b.HasOne("Ground_Storage_WebAPI.Models.Record", "Record")
                        .WithMany("Conflicts")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Record");
                });

            modelBuilder.Entity("Ground_Storage_WebAPI.Models.Record", b =>
                {
                    b.Navigation("Conflicts");
                });
#pragma warning restore 612, 618
        }
    }
}
